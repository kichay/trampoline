#!/bin/busybox sh

# Defaults
busybox="/bin/busybox"
build="$($busybox mktemp -d)"
depmod="$($busybox mktemp)"
modules="/lib/modules/$($busybox uname -r)"
self="$($busybox basename $0)"

# Prepare init
$busybox mkdir -p \
    $build \
    $build/bin \
    $build/dev \
    $build/proc \
    $build/var \
    $build/etc \
    $build/newroot
$busybox tail $0 -n 54 > $build/init
$busybox chmod 755 $build/init
$busybox cp -L $busybox $build/bin/busybox

# Build depmod
$busybox depmod -n \
    > $depmod

# Regex modules
function regex_modules() {
    $busybox echo "$1" \
        | $busybox sed -E -e 's/(_|-)/(_|-)/g'
}

# Get module dependencies
function get_module_dependencies() {
    module=$(regex_modules "$1")
    (
        $busybox grep -E \
            -e "^[^ ]*/$module\.ko " \
            -e "^[^ ]*.ko( .* | )$module( |$)" \
            -A 1 $depmod \
        || $busybox echo "$self: get_module_dependencies() failed for $1" >&2
    ) | $busybox awk -F " " '{
        if (!match($1, /^.*\.ko$/) && ($1 != ""))
            print $0;
    }'
}

# Get module dependencies recursively
function get_module_dependencies_full() {
    collector="$1"
    dependencies_all=""
    while [ -n "$collector" ]; do
        dependencies=""
        for module in $collector; do
            dependencies="$output$(get_module_dependencies $module) "
        done
        dependencies_all="$dependencies_all$dependencies"
        collector="$dependencies"
    done
    $busybox echo "$dependencies_all"
}

# Get module filename
function get_module_filename() {
    module=$(regex_modules "$1")
    $busybox grep -E \
        -e "^[^ ]*/$1\.ko " \
        -e "^[^ ]*.ko( .* | )$1( |$)" \
        $depmod | awk -F " " '{
            print $1;
        }'
}

# Parse module line
function parse_module_line() {
    $busybox echo "$1" | $busybox sed -E \
        -e 's/#.*$//g' \
        -e 's/\s[^\s]*$//g' \
        -e '/^\s*$/d'   
}

# Collect modules from stdin
trap 'break' SIGPIPE
collected_modules=""
while read module_line; do
    collected_modules="$collected_modules$(
        get_module_dependencies_full $(parse_module_line $module_line)
    )"
done

# Copy modules
for module in $collected_modules; do
    $busybox mkdir -p \
        $build/$modules/$(busybox dirname $(get_module_filename $module))
    $busybox cp \
        $modules/$(get_module_filename $module) \
        $build/lib/modules/$($busybox uname -r)/$(get_module_filename $module)
done

# Build initramfs
(
    cd $build
    $busybox find . | $busybox cpio -H newc -R 0:0 -o
)

# Clean
$busybox rm -rf $build $depmod

exit 0

################################################################################

#!/bin/busybox sh

# Install busybox
/bin/busybox --install -s /bin
export PATH=/bin

# Pseudo filesystems
mountpoint -q /dev || mount -t devtmpfs devtmpfs /dev
mountpoint -q /proc || mount -t proc proc /proc

# Root arguments
for arg in \
    root \
    root_mount_timeout \
    root_mount_tick \
    root_init
do
    eval $(grep -o -w "$arg=[^ ]*" /proc/cmdline)
done

# Mount command
root_mount_command="mount $root /newroot"
grep -q -w "ro" /proc/cmdline \
    && root_mount_command="$root_mount_command -o ro"

# Empty root exception
if [[ -z $root ]]; then
    echo "initrd: could not parse root argument"
    echo "cmdline: $(cat /proc/cmdline)"
    exit 1
fi

# Defaults
[[ -z "$root_mount_timeout" ]] && root_mount_timeout=15
[[ -z "$root_mount_tick" ]] && root_mount_tick=0.5
[[ -z "$root_init" ]] && root_init='/bin/init'

# Modprobe foreach
awk -F "#" '{
    if($1 != "")
        system("modprobe "$1);
}' /etc/modules

# Mount loop
for i in $(seq 0 $root_mount_tick $root_mount_timeout); do
    eval $root_mount_command 1>/var/mount.log 2>&1 \
        && exec run-init /newroot $root_init
    sleep $root_mount_tick
done

# Mount error
echo "initrd: $root_mount_command (loop)"
echo "$(cat /var/mount.log) (last try)"
exit 2
